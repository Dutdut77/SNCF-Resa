create table "public"."profiles" (
    "id" uuid not null,
    "nom" text,
    "prenom" text,
    "email" text,
    "id_secteur" text,
    "secteur_auth" text
);


alter table "public"."profiles" enable row level security;

create table "public"."secteurs" (
    "id" bigint generated by default as identity not null,
    "name" text not null,
    "sect_admin_id_user" bigint
);


alter table "public"."secteurs" enable row level security;

CREATE UNIQUE INDEX profiles_pkey ON public.profiles USING btree (id);

CREATE UNIQUE INDEX secteur_pkey ON public.secteurs USING btree (id);

alter table "public"."profiles" add constraint "profiles_pkey" PRIMARY KEY using index "profiles_pkey";

alter table "public"."secteurs" add constraint "secteur_pkey" PRIMARY KEY using index "secteur_pkey";

alter table "public"."profiles" add constraint "public_profiles_id_fkey" FOREIGN KEY (id) REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."profiles" validate constraint "public_profiles_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.handle_new_user()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$begin
  insert into public.profiles (id, email, nom, prenom, id_secteur)
  values (new.id, new.email, new.raw_user_meta_data ->>'nom', new.raw_user_meta_data ->>'prenom', new.raw_user_meta_data ->>'id_secteur');
  return new;
end;$function$
;

grant delete on table "public"."profiles" to "anon";

grant insert on table "public"."profiles" to "anon";

grant references on table "public"."profiles" to "anon";

grant select on table "public"."profiles" to "anon";

grant trigger on table "public"."profiles" to "anon";

grant truncate on table "public"."profiles" to "anon";

grant update on table "public"."profiles" to "anon";

grant delete on table "public"."profiles" to "authenticated";

grant insert on table "public"."profiles" to "authenticated";

grant references on table "public"."profiles" to "authenticated";

grant select on table "public"."profiles" to "authenticated";

grant trigger on table "public"."profiles" to "authenticated";

grant truncate on table "public"."profiles" to "authenticated";

grant update on table "public"."profiles" to "authenticated";

grant delete on table "public"."profiles" to "service_role";

grant insert on table "public"."profiles" to "service_role";

grant references on table "public"."profiles" to "service_role";

grant select on table "public"."profiles" to "service_role";

grant trigger on table "public"."profiles" to "service_role";

grant truncate on table "public"."profiles" to "service_role";

grant update on table "public"."profiles" to "service_role";

grant delete on table "public"."secteurs" to "anon";

grant insert on table "public"."secteurs" to "anon";

grant references on table "public"."secteurs" to "anon";

grant select on table "public"."secteurs" to "anon";

grant trigger on table "public"."secteurs" to "anon";

grant truncate on table "public"."secteurs" to "anon";

grant update on table "public"."secteurs" to "anon";

grant delete on table "public"."secteurs" to "authenticated";

grant insert on table "public"."secteurs" to "authenticated";

grant references on table "public"."secteurs" to "authenticated";

grant select on table "public"."secteurs" to "authenticated";

grant trigger on table "public"."secteurs" to "authenticated";

grant truncate on table "public"."secteurs" to "authenticated";

grant update on table "public"."secteurs" to "authenticated";

grant delete on table "public"."secteurs" to "service_role";

grant insert on table "public"."secteurs" to "service_role";

grant references on table "public"."secteurs" to "service_role";

grant select on table "public"."secteurs" to "service_role";

grant trigger on table "public"."secteurs" to "service_role";

grant truncate on table "public"."secteurs" to "service_role";

grant update on table "public"."secteurs" to "service_role";

create policy "Public profiles are viewable by everyone."
on "public"."profiles"
as permissive
for select
to public
using (true);


create policy "Users can insert their own profile."
on "public"."profiles"
as permissive
for insert
to public
with check ((( SELECT auth.uid() AS uid) = id));


create policy "Users can update own profile."
on "public"."profiles"
as permissive
for update
to public
using ((( SELECT auth.uid() AS uid) = id));


create policy "ALL_ACCESS_AUTHENTIFICATED"
on "public"."secteurs"
as permissive
for all
to anon, authenticated
using (true);